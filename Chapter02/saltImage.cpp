#include <iostream>
#include <random>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>


using namespace std;
using namespace cv;

#pragma region Salt Test
void salt(Mat image, int n)
{
	default_random_engine generator;
	uniform_int_distribution<int> randRows(0, image.rows - 1);
	uniform_int_distribution<int> randCols(0, image.cols - 1);

	for (int k = 0; k < n; k++)
	{
		int i = randCols(generator);
		int j = randRows(generator);
		//cout << "the " << k << " time: i=" << i << " ,j=" << j << endl;
		if (image.type()==CV_8UC1)
		{
			image.at<uchar>(j, i) = 255;
		}
		if (image.type()==CV_8UC3)
		{
			image.at<Vec3b>(j, i)[0] = 255;
			image.at<Vec3b>(j, i)[1] = 255;
			image.at<Vec3b>(j, i)[2] = 255;
		}
	}
}
#pragma endregion

#pragma region Salt Test2---the usage of CV::Mat_
	// this is the extra version of the function
	// to illustrate the use of cv::Mat_ works only for a 1-channel image
void saltImage2(Mat image, int n)
{
	//must be a gray level image
	CV_Assert(image.type()==CV_8UC1);

	//c++11 random Number generator
	default_random_engine generator;
	uniform_int_distribution<int> randRows(0, image.rows - 1);
	uniform_int_distribution<int> randCols(0, image.cols - 1);

	//use image with a Mat_ template
	Mat_<uchar> img(image);
	
	//or with references
	//Mat_<uchar>& im2 = reinterpret_cast<Mat_<uchar>&>(image);

	int i, j;
	for (int k = 0; k < n; k++)
	{
		i = randRows(generator);
		j = randCols(generator);
		img(i, j) = 255;
	}

}

#pragma endregion


int main()
{
//#pragma region Uniform_int_distribution Test
//	random_device rd;	// will be used to obtain a seed for the random number engine
//	mt19937 gen(rd());  // Standard mersenne_twister_engine seeded with rd()
//	uniform_int_distribution<int> dis(1, 6); // generate the uniform distributed number ranged (1,6)
//
//	for (int i = 0; i < 10; i++)
//	{
//		// Use dis to transform the random unsigned int generated by gen into an int in [1,6]
//		cout << dis(gen) << endl;
//	}
//	getchar();
//
//#pragma endregion


	Mat img = imread("boldt.jpg");
	Mat img2;

	cvtColor(img, img2, CV_BGR2GRAY);
	salt(img,3000);
	imshow("the original Image",img);

	// the element size of each element in the image
	int eSize=img.elemSize();
	// the total number of pixels in an image
	int totalElement = img.total();
	cout << "the total number of pixels in an image is " << totalElement << endl;
	cout << "the element size of the original image is " << eSize << endl;

	// the position of the first image data in the original image
	uchar *position = img.ptr<uchar>(0);
	cout << "the first image data position in the image " << int(*position) << endl;




	saltImage2(img2,500);
	imshow("the image operated by salt2", img2);
	waitKey(0);

	return 0;
}
